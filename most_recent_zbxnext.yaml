zabbix_export:
  version: '7.0'
  host_groups:
    - uuid: 4d254bcd60a041bba3d2b87cc2aaf681
      name: 'Zabbix pages'
  hosts:
    - host: 'ZBXNEXT host'
      name: 'ZBXNEXT host'
      groups:
        - name: 'Zabbix pages'
      items:
        - name: 'Get latest ZBXNEXTs'
          type: BROWSER
          key: authenticate
          delay: 12h
          value_type: TEXT
          trends: '0'
          params: |
            var browser, result;
            var opts = Browser.chromeOptions();
            opts.capabilities.alwaysMatch['goog:chromeOptions'].args = []
            browser = new Browser(opts);
            browser.setScreenSize(Number(1980), Number(1020));
            try {
            
            var params = JSON.parse(value); // Parse the JSON string containing parameters passed from Zabbix.
            
            browser.navigate(params.url);
             
            
            // enter username
            var el = browser.findElement(params.strategy, params.loginfield);
            if (el === null) {throw Error("cannot find name input field");}
            el.sendKeys(params.username);
            
            // enter password
            el = browser.findElement(params.strategy, params.passwordfield);
            if (el === null) { throw Error("cannot find password input field"); }
            el.sendKeys(params.password);
            
            // login
            el = browser.findElement(params.strategy, params.button);
            if (el === null) { throw Error("cannot find login button"); }
            el.click();
            
            Zabbix.sleep(2000);
            
            // login
            el = browser.findElement("link text", "Issues");
            if (el === null) { throw Error("cannot find login button"); }
            el.click();
            
            Zabbix.sleep(2000);
            // login
            el = browser.findElement("css selector", "a#issue_lnk_more_lnk");
            if (el === null) { throw Error("cannot find all issues"); }
            el.click();
            
            Zabbix.sleep(2000);
            
            // login
            el = browser.findElement("css selector", "textarea#advanced-search");
            if (el === null) { throw Error("cannot find login button"); }
            el.clear();
            el.sendKeys("project = ZBXNEXT AND resolution = Unresolved ORDER BY created DESC");
                
            function uniq(a) {
                    return a.sort().filter(function (item, pos, ary) {
                        return !pos || item != ary[pos - 1];
                    });
                }
            
            // login
            el = browser.findElement("xpath", "//button[text()='Search']");
            if (el === null) { throw Error("cannot find login button"); }
            el.click();
            
            Zabbix.sleep(2000);
            
            el = browser.findElements("xpath", "//*[contains(text(), '')]");
            var links = [];
            for (var n = 0; n < el.length; n++) { 
                links.push(el[n].getAttribute('href')); 
            }
            links = uniq(links);
            var lld = [];
            for (i = 0; i < links.length; i++) {
                if (links[i].match(/.ZBXNEXT.*/)) {
                    var row = {};
                    // Remove the '/browse/' string from the link
                    var modifiedLink = links[i].replace('/browse/', '');
                    row["{#ZBXNEXT}"] = modifiedLink;
                    lld.push(row);
                }
            }
            
               result = browser.getResult();
               result.screenshot = browser.getScreenshot();
            
            }
            
            catch (err) {
               if (!(err instanceof BrowserError)) {
                    browser.setError(err.message);
               }
                result = browser.getResult();
                result.error.screenshot = browser.getScreenshot();
            }
            finally {
                return JSON.stringify(lld);
            }
          parameters:
            - name: button
              value: '{$LOGIN.FORM.BUTTON.PATH}'
            - name: loginfield
              value: '{$LOGIN.FORM.FIELD.PATH}'
            - name: password
              value: '{$PAGE.PASSWORD}'
            - name: passwordfield
              value: '{$LOGIN.FORM.PASS.FIELD.PATH}'
            - name: strategy
              value: '{$LOGIN.FORM.STRATEGY.TYPE}'
            - name: url
              value: '{$LINK}'
            - name: username
              value: '{$PAGE.USERNAME}'
        - name: itemidget
          type: HTTP_AGENT
          key: test.rpc
          value_type: TEXT
          trends: '0'
          url: 'http://{$ZABBIX.DOMAIN}/api_jsonrpc.php'
          post_type: JSON
          posts: |
            {
                "jsonrpc": "2.0",
                "method": "item.get",
                "params": {
                    "output": ["itemid"],
                    "hostids": "<your-host-id>",
                    "search": {
                        "key_": "screenshot"
                    }
                },
                "auth": "Your-API-token",
                "id": 1
            }
          request_method: POST
      discovery_rules:
        - name: 'Discover latest ZBXNEXT'
          type: DEPENDENT
          key: zbxnext.discovery
          delay: '0'
          filter:
            conditions:
              - macro: '{#ZBXNEXT}'
                value: ^ZBXNEXT-(\d+)$
                formulaid: A
          lifetime_type: DELETE_IMMEDIATELY
          lifetime: '0'
          item_prototypes:
            - name: 'Most recent {#ZBXNEXT} screenshot'
              type: HTTP_AGENT
              key: 'extract.screen[{#ZBXNEXT}]'
              delay: 12h
              value_type: TEXT
              trends: '0'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.result[0].itemid'
                - type: JAVASCRIPT
                  parameters:
                    - |
                      var test = (value)
                      
                      // Create a new HttpRequest object
                          var req = new HttpRequest();
                      
                          // Define the data to be sent in the request
                          var requestData = {
                              "jsonrpc": "2.0",
                              "method": "history.get",
                              "params": {
                                  "output": "extend",
                                  "history": 5,
                                  "itemids": test,
                                  "sortfield": "clock",
                                  "sortorder": "DESC",
                                  "limit": 1
                              },
                              "auth": "<your-api-token>",
                              "id": 1
                          };
                      
                          // Convert the request data to a JSON string
                          var requestDataString = JSON.stringify(requestData);
                      
                          // Send the request with the JSON string data
                          var resp = req.post('http://{$ZABBIX.DOMAIN}/api_jsonrpc.php', requestDataString);
                      
                          // Extract the desired value from the response
                          result = resp; // Adjust this to the appropriate field based on API response
                      
                      return result;
                - type: JSONPATH
                  parameters:
                    - '$.result[0].value'
              url: 'http://{$ZABBIX.DOMAIN}/api_jsonrpc.php'
              post_type: JSON
              posts: |
                {
                    "jsonrpc": "2.0",
                    "method": "item.get",
                    "params": {
                        "output": ["itemid"],
                        "hostids": "<your-host-id>",
                        "search": {
                            "key_": "screenshot[{#ZBXNEXT}]"
                        }
                    },
                    "auth": "<your-api-token>",
                    "id": 1
                }
              request_method: POST
            - name: 'Get {#ZBXNEXT}'
              type: BROWSER
              key: 'get.data[{#ZBXNEXT}]'
              delay: 1d
              history: '0'
              value_type: TEXT
              trends: '0'
              params: |
                var params = JSON.parse(value);
                var browser = new Browser(Browser.chromeOptions());
                
                const screenshot = '';
                browser.setScreenSize(Number(1080), Number(720))
                browser.navigate(params.web + params.url);
                Zabbix.sleep(2000);
                browser.collectPerfEntries();
                screenshot = browser.getScreenshot();
                const result = browser.getResult();
                result.screenshot = screenshot;
                
                return JSON.stringify(result);
              parameters:
                - name: url
                  value: '{#ZBXNEXT}'
                - name: web
                  value: 'https://support.zabbix.com/browse/'
            - name: '{#ZBXNEXT} creation date'
              type: BROWSER
              key: 'get.date[{#ZBXNEXT}]'
              delay: 1d
              trends: '0'
              units: unixtime
              params: |
                var params = JSON.parse(value);
                var browser, result;
                var opts = Browser.chromeOptions();
                opts.capabilities.alwaysMatch['goog:chromeOptions'].args = []
                browser = new Browser(opts);
                function uniq(a) {
                    return a.sort().filter(function (item, pos, ary) {
                        return !pos || item != ary[pos - 1];
                    });
                }
                browser.navigate(params.web + params.url);
                var el = browser.findElements("css selector", "span#created-val>time");
                var date= [];
                for (var n = 0; n < el.length; n++) { date.push(el[n].getAttribute('datetime')); }
                date = uniq(date);
                
                return (date);
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |
                      const dateString = value;
                      const dateWithoutOffset = dateString.slice(0, -5) + 'Z';
                      const dateObject = new Date(dateWithoutOffset);
                      const unixTimestamp = Math.floor(dateObject.getTime() / 1000);
                      
                      return(unixTimestamp);
              parameters:
                - name: url
                  value: '{#ZBXNEXT}'
                - name: web
                  value: 'https://support.zabbix.com/browse/'
            - name: '{#ZBXNEXT} performance data'
              type: DEPENDENT
              key: 'perf.data[{#ZBXNEXT}]'
              delay: '0'
              value_type: TEXT
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.performance_data
              master_item:
                key: 'get.data[{#ZBXNEXT}]'
            - name: '{#ZBXNEXT} screenshot'
              type: DEPENDENT
              key: 'screenshot[{#ZBXNEXT}]'
              delay: '0'
              value_type: BINARY
              trends: '0'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.screenshot
              master_item:
                key: 'get.data[{#ZBXNEXT}]'
          trigger_prototypes:
            - expression: '(now()-last(/ZBXNEXT host/get.date[{#ZBXNEXT}]))/86400 <{$DAYS.SINCE.ZBXNEXT.CREATED} and last(/ZBXNEXT host/extract.screen[{#ZBXNEXT}])<>0'
              name: 'A new {#ZBXNEXT} has been created'
              priority: INFO
              manual_close: 'YES'
          master_item:
            key: authenticate
      macros:
        - macro: '{$DAYS.SINCE.ZBXNEXT.CREATED}'
          value: '1'
        - macro: '{$LINK}'
          value: 'https://support.zabbix.com/'
        - macro: '{$LOGIN.FORM.BUTTON.PATH}'
          value: 'input#login'
        - macro: '{$LOGIN.FORM.FIELD.PATH}'
          value: 'input#login-form-username'
        - macro: '{$LOGIN.FORM.PASS.FIELD.PATH}'
          value: 'input#login-form-password'
        - macro: '{$LOGIN.FORM.STRATEGY.TYPE}'
          value: 'css selector'
        - macro: '{$PAGE.PASSWORD}'
          type: SECRET_TEXT
        - macro: '{$PAGE.USERNAME}'
          type: SECRET_TEXT
        - macro: '{$ZABBIX.DOMAIN}'
          value: <your-vm-ip>
      inventory_mode: DISABLED
